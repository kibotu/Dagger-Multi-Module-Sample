import java.security.spec.InvalidKeySpecException

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId "net.kibotu.dagger.demo"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true

        resConfigs "en"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        consumerProguardFiles 'consumer-rules.pro'

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }
    }

    // region view binding

    viewBinding {
        enabled = true
    }

    // endregion

    // region signing configs

    signingConfigs {
        try {
            debug {
                storeFile file(DEBUG_KEYSYORE_PATH)
                storePassword DEBUG_STORE_PASSWORD
                keyAlias DEBUG_KEYSTORE_ALLIAS
                keyPassword DEBUG_KEY_PASSWORD
            }
        }
        catch (final ignored) {
            throw new InvalidKeySpecException('You should define DEBUG_KEYSTORE_ALLIAS, DEBUG_STORE_PASSWORD, DEBUG_KEY_PASSWORD in gradle.properties.')
        }
        try {
            release {
                storeFile file(RELEASE_KEYSYORE_PATH)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEYSTORE_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        } catch (final ignored) {
            throw new InvalidKeySpecException('You should define RELEASE_KEYSTORE_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD in gradle.properties.')
        }
    }

    // endregion

    // region build types

    buildTypes {

        debug {
            pseudoLocalesEnabled true
            debuggable true
            minifyEnabled false
            crunchPngs false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
            testCoverageEnabled true
        }

        release {
            pseudoLocalesEnabled false
            debuggable false
            minifyEnabled true
            crunchPngs true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // endregion

    // region bundle config

    bundle {
        density {
            enableSplit true
        }
        abi {
            enableSplit true
        }
        language {
            enableSplit false
        }
    }

    // endregion

    // region compile options

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // endregion

    // region compile options

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    // endregion

    // region dex options

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    // endregion

    // region adb options

    adbOptions {
        timeOutInMs 10 * 60 * 1000 // 10 minutes
    }

    // endregion

    // region test options

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    // endregion

    // region kotlin documentation

    dokka {
        outputFormat = 'html'
        // outputDirectory = "$buildDir/javadoc"
        outputDirectory = project.rootProject.file("documentation/javadoc")
    }

    // endregion

    // region exclude duplicated meta inf files

    packagingOptions {
        exclude 'META-INF/library-core_release.kotlin_module'
        exclude 'META-INF/lib_release.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    // endregion
}

kapt {
    useBuildCache = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(path: ':core')

    debugImplementation libs.leakCanary

    // kotlin
    implementation libs.kotlinJdk8

    // support libraries
    implementation libs.appCompat
    implementation libs.appCompatResources
    implementation libs.androidKtxCore
    implementation libs.activityKtx
    implementation libs.fragmentKtx
    implementation libs.constraintlayout
    implementation libs.material
    implementation libs.annotation

    // unit tests
    testImplementation testLibs.junit
    testImplementation testLibs.truth

    // instrumentation tests
    androidTestImplementation androidTestLibs.junit
    androidTestImplementation androidTestLibs.espressoCore
    androidTestUtil androidTestUtils.orchestrator
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}